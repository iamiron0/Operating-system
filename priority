#include <stdio.h>
#include <stdlib.h>

struct sjf {
    int pid;
    int btime;
    int wtime;
    int ttime;
    int pritime;
} p[10];

int main() {
    int n, i, j, temp;
    int totwtime = 0, totttime = 0;
    int pri[10]; // Declare priority array

    printf("\nSJF scheduling...\n");
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Get burst times and priorities for each process
    for(i = 0; i < n; i++) {
        p[i].pid = i + 1; 
        printf("\nEnter burst time for process %d: ", p[i].pid);
        scanf("%d", &p[i].btime); 
    }

    printf("Enter the priority of each process:\n");
    for(i = 0; i < n; i++) {
        scanf("%d", &pri[i]); // Read the priority for each process
    }

    // Sorting processes based on priority
    for(i = 0; i < n; i++) {
        p[i].pritime = pri[i]; // Store priority in the struct
    }

    // Sort processes based on priority (ascending order)
    for(i = 0; i < n - 1; i++) {
        for(j = i + 1; j < n; j++) {
            if(p[i].pritime > p[j].pritime) {
                // Swap burst time
                temp = p[i].btime;
                p[i].btime = p[j].btime;
                p[j].btime = temp;

                // Swap priority
                temp = p[i].pritime;
                p[i].pritime = p[j].pritime;
                p[j].pritime = temp;

                // Swap process ID
                temp = p[i].pid;
                p[i].pid = p[j].pid;
                p[j].pid = temp;
            }
        }
    }

    // Waiting and Turnaround times calculation
    p[0].wtime = 0; // Waiting time for the first process is 0
    p[0].ttime = p[0].btime; // Turnaround time for the first process is equal to its burst time
    totwtime = p[0].wtime; // Start summing waiting time
    totttime = p[0].ttime; // Start summing turnaround time

    for(i = 1; i < n; i++) {
        p[i].wtime = p[i - 1].wtime + p[i - 1].btime; // Waiting time of current process
        p[i].ttime = p[i].wtime + p[i].btime; // Turnaround time = waiting time + burst time
        totwtime += p[i].wtime; // Sum of waiting times
        totttime += p[i].ttime; // Sum of turnaround times
    }

    // Display the results
    printf("\nProcess\tBurst Time\tWaiting Time\tTurnaround Time\tPriority Time\n");
    for(i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].btime, p[i].wtime, p[i].ttime,p[i].pritime);
    }

    // Calculate average times
    printf("\nTotal waiting time: %d", totwtime);
    printf("\nAverage waiting time: %.2f", (float)totwtime / n);
    printf("\nTotal turnaround time: %d", totttime);
    printf("\nAverage turnaround time: %.2f", (float)totttime / n);

    // Display the Gantt chart
    printf("\n\nGantt Chart:\n");
    printf("-------------------------------------------------\n");
    for(i = 0; i < n; i++) {
        printf("| P%d ", p[i].pid); // Print process IDs in Gantt chart
    }
    printf("|\n");

    printf("-------------------------------------------------\n");
    for(i = 0; i < n; i++) {
        printf("%d   ", p[i].wtime); // Print the start time for each process
    }
    printf("%d\n", p[n - 1].ttime); // Print the end time of the last process

    return 0;
}
