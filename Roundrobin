#include <stdio.h>
#include <stdlib.h>

struct sjf {
    int pid;
    int btime;
    int wtime;
    int ttime;
    int pritime;
} p[10];

int main() {
    int n, i, ts;
    int totwtime = 0, totttime = 0;
    int remainingTime[10], gantt[100], ganttTime[100];  // Arrays to store Gantt chart and times
    int time = 0, ganttIndex = 0;
    int done = 0;  // To check if all processes are done

    printf("\nRound Robin Scheduling...\n");
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    
    for(i = 0; i < n; i++) {
        p[i].pid = i + 1; 
        printf("\nEnter burst time for process %d: ", p[i].pid);
        scanf("%d", &p[i].btime);
        remainingTime[i] = p[i].btime; // Initialize remaining time for each process
    }

    printf("Enter the time slice (quantum): ");
    scanf("%d", &ts);

    // Round Robin execution
    while(1) {
        done = 1;
        for (i = 0; i < n; i++) {
            if (remainingTime[i] > 0) {
                done = 0;
                gantt[ganttIndex] = p[i].pid;         // Add process to Gantt chart
                ganttTime[ganttIndex++] = time;        // Add time to Gantt chart
                if (remainingTime[i] > ts) {
                    time += ts;
                    remainingTime[i] -= ts;
                } else {
                    time += remainingTime[i];
                    remainingTime[i] = 0;
                }
            }
        }
        if(done) break; // All processes are completed
    }

    
    for(i = 0; i < n; i++) {
        p[i].wtime = 0;
        p[i].ttime = p[i].btime;
        totwtime += p[i].wtime;
        totttime += p[i].ttime;
    }

    
    printf("\nProcess   Burst Time   Waiting Time   Turnaround Time\n");
    for(i = 0; i < n; i++) {
        printf("%d         %d             %d             %d\n", p[i].pid, p[i].btime, p[i].wtime, p[i].ttime);
    }

    
    printf("\nTotal waiting time: %d", totwtime);
    printf("\nAverage waiting time: %.2f", (float)totwtime / n);
    printf("\nTotal turnaround time: %d", totttime);
    printf("\nAverage turnaround time: %.2f", (float)totttime / n);

    
    printf("\n\nGantt Chart:\n");
    printf("-------------------------------------------------\n");
    for(i = 0; i < ganttIndex; i++) {
        printf("| P%d ", gantt[i]); // Print process IDs in Gantt chart
    }
    printf("|\n");

    printf("-------------------------------------------------\n");
    for(i = 0; i < ganttIndex; i++) {
        printf("%d   ", ganttTime[i]); // Print the time for each process in the Gantt chart
    }
    printf("%d\n", time); // Print the end time of the last process

    return 0;
}
