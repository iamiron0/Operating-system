#include <stdio.h>

int main() {
    int n, m, i, j, k, y, alloc[20][20], max[20][20], avail[50], ind = 0;

    
    printf("Enter the processes: ");
    scanf("%d", &n);
    printf("Enter the number of resources: ");
    scanf("%d", &m);

    
    printf("Enter the allocation matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    
    printf("Enter the max matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {  
            scanf("%d", &max[i][j]);
        }
    }

    
    printf("Enter the available resources matrix:\n");
    for (i = 0; i < m; i++) {
        scanf("%d", &avail[i]);
    }

    // Initialize finish, safesequence, work, and need arrays
    int finish[n], safesequence[n], work[m], need[n][m];
    
    // Initialize the work array to available resources
    for (i = 0; i < m; i++) {
        work[i] = avail[i];
    }

    // Initialize the finish array to 0 (not finished)
    for (i = 0; i < n; i++) {
        finish[i] = 0;
    }

    // Calculate the need matrix
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    // Print the need matrix
    printf("Need matrix is:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", need[i][j]);  // Adding space for clarity
        }
        printf("\n");
    }

    // Applying Banker's Algorithm to find safe sequence
    for (k = 0; k < n; k++) {
        for (i = 0; i < n; i++) {
            if (finish[i] == 0) {
                int flag = 0;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        flag = 1;
                        break;
                    }
                }
                if (flag == 0) {
                    safesequence[ind++] = i;
                    for (y = 0; y < m; y++) {
                        work[y] += alloc[i][y];  // Add allocated resources to work
                    }
                    finish[i] = 1;  // Mark process as finished
                }
            }
        }
    }

    // Print the safe sequence
    printf("\nFollowing is the safe sequence:\n");
    for (i = 0; i < n; i++) { 
        printf("P%d ", safesequence[i]);
    }
    printf("\n");

    return 0;
}
